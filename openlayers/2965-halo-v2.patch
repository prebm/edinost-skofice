Index: lib/OpenLayers/Renderer/NG.js
===================================================================
--- lib/OpenLayers/Renderer/NG.js	(revision 12369)
+++ lib/OpenLayers/Renderer/NG.js	(working copy)
@@ -106,12 +106,16 @@
      * {DOMElement} container holding the text label (to be populated by
      * subclasses)
      */
-    drawText: function(featureId, style, location) {
+    drawText: function(featureId, style, location, drawHalo) {
         var label;
+        var haloSuffix = drawHalo ? this.HALO_ID_SUFFIX : "";
+        //var haloSuffix = "";
+
         if (typeof featureId !== "string") {
             label = featureId;
         } else {
-            label = this.nodeFactory(featureId + this.LABEL_ID_SUFFIX, this.labelNodeType);
+            label = this.nodeFactory(featureId + this.LABEL_ID_SUFFIX 
+                                        + haloSuffix, this.labelNodeType);
             label._featureId = featureId;
         }
         label._style = style;
Index: lib/OpenLayers/Renderer/Canvas.js
===================================================================
--- lib/OpenLayers/Renderer/Canvas.js	(revision 12369)
+++ lib/OpenLayers/Renderer/Canvas.js	(working copy)
@@ -534,6 +534,11 @@
                 this.canvas.measureText('xx').width;
             pt[1] += lineHeight*vfactor*(numRows-1);
             for (var i = 0; i < numRows; i++) {
+                if (style.labelHaloColor) {
+                    this.canvas.strokeStyle = style.labelHaloColor;
+                    this.canvas.lineWidth = style.labelHaloWidth || 2;
+                    this.canvas.strokeText(labelRows[i], pt[0], pt[1] + (lineHeight*i));
+                }
                 this.canvas.fillText(labelRows[i], pt[0], pt[1] + (lineHeight*i));
             }
         } else if (this.canvas.mozDrawText) {
Index: lib/OpenLayers/Renderer/Elements.js
===================================================================
--- lib/OpenLayers/Renderer/Elements.js	(revision 12369)
+++ lib/OpenLayers/Renderer/Elements.js	(working copy)
@@ -392,6 +392,12 @@
      * {String}
      */
     LABEL_ID_SUFFIX: "_label",
+
+     /**
+     * Constant: HALO_ID_SUFFIX
+     * {String}
+     */
+    HALO_ID_SUFFIX: "_halo",
     
     /**
      * Constructor: OpenLayers.Renderer.Elements
@@ -836,6 +842,12 @@
         var label = document.getElementById(featureId + this.LABEL_ID_SUFFIX);
         if (label) {
             this.textRoot.removeChild(label);
+
+            var labelHalo = document.getElementById(featureId + 
+                this.LABEL_ID_SUFFIX + this.HALO_ID_SUFFIX);
+            if (labelHalo) {
+                this.textRoot.removeChild(labelHalo);
+            }
         }
     },
 
Index: lib/OpenLayers/Renderer/VML.js
===================================================================
--- lib/OpenLayers/Renderer/VML.js	(revision 12369)
+++ lib/OpenLayers/Renderer/VML.js	(working copy)
@@ -54,7 +54,10 @@
         if (!document.namespaces.olv) {
             document.namespaces.add("olv", this.xmlns);
             var style = document.createStyleSheet();
-            var shapes = ['shape','rect', 'oval', 'fill', 'stroke', 'imagedata', 'group','textbox']; 
+            var shapes = [
+                'shape','rect', 'oval', 'fill', 'stroke', 'imagedata', 'group','textbox', 
+                'fill', 'stroke', 'path', 'textpath' // for new textpath
+            ]; 
             for (var i = 0, len = shapes.length; i < len; i++) {
 
                 style.addRule('olv\\:' + shapes[i], "behavior: url(#default#VML); " +
@@ -817,8 +820,180 @@
      * featureId - {String}
      * style -
      * location - {<OpenLayers.Geometry.Point>}
+     * useHalo - {Boolean}
      */
-    drawText: function(featureId, style, location) {
+    drawText: function (featureId, style, location, useHalo) {
+
+        // If the user wants a halo, first draw the text with a
+        // thick stroke (using the halo color) and then draw the
+        // text normally over that
+        // Idea from:
+        // http://www.mail-archive.com/svg-developers@yahoogroups.com/msg01002.html
+        if (style.labelHaloColor) {
+            var haloStyle = OpenLayers.Util.extend({}, style);
+            haloStyle.fontStrokeColor = haloStyle.labelHaloColor;
+            haloStyle.fontStrokeWidth = haloStyle.labelHaloWidth || 2;
+            delete haloStyle.labelHaloColor;
+            this.drawText(featureId, haloStyle, location, true);
+        }
+
+        var label = this.nodeFactory(featureId + this.LABEL_ID_SUFFIX + 
+                (useHalo ? this.HALO_ID_SUFFIX : ""), "olv:shape");
+
+        // Add it to the DOM hierarchy
+        if(!label.parentNode) {
+            this.textRoot.appendChild(label);
+        }
+
+        // Set its dimension and position attributes
+        var resolution = this.getResolution();
+        label.style.left = ((location.x/resolution - this.offset.x) | 0) + "px";
+        label.style.top = ((location.y/resolution - this.offset.y) | 0) + "px";
+        label.style.flip = "y";
+        label.style.position = "absolute";
+        label.style.width = 1 + "px"; // some dummy value
+        label.style.height = 1 + "px"; // some dummy value
+        label.style.antialias = "true";
+        /*
+        var nodeStyle = { fillColor: style.fontColor,
+            fillOpacity: style.fontOpacity,
+            strokeColor: style.fontStrokeColor,
+            strokeWidth: style.fontHaloSize || 2,
+            strokeOpacity: style.fontOpacity
+
+        }
+        var nodeOptions = {
+            isFilled:  style.fontColor,
+            isStroked: style.fontStrokeColor 
+        }
+
+        this.setStyle(label, nodeStyle, nodeOptions, null);
+        */
+
+
+        // Create the fill object
+        var myFill = document.createElement("olv:fill");
+        myFill.on = "true";
+        myFill.color = style.fontColor;
+
+        // Add it to the DOM hierarchy
+        label.appendChild(myFill);
+
+        // Create the stroke object. We need to define the 
+        // stroke explicitly, otherwise we get a default 
+        // black outline
+        var myStroke = document.createElement("olv:stroke");
+        if (style.fontStrokeColor) {
+            myStroke.on = "true";
+            myStroke.color = style.fontStrokeColor;
+        } else {
+            myStroke.on = "false";
+        }
+
+        if (style.fontStrokeWidth) {
+            myStroke.weight = style.fontStrokeWidth;
+        } 
+
+        // Add it to the DOM hierarchy
+        label.appendChild(myStroke);
+
+        // Create the path object
+        var path = document.createElement("olv:path");
+        path.textpathok = "True";
+        path.v = "m 0,0 l 200,0";
+
+        // Add it to the DOM hierarchy
+        label.appendChild(path);
+
+        // Create the textpath object
+        var textpath = document.createElement("olv:textpath");
+        textpath.on = "true";
+        textpath.fitpath = "false";
+        textpath.string = style.label;
+
+        label.appendChild(textpath);
+
+        if (style.cursor != "inherit" && style.cursor != null) {
+            label.style.cursor = style.cursor;
+        }
+
+        if (style.fontColor) {
+            textpath.style.color = style.fontColor;
+        }
+        if (style.fontOpacity) {
+            myFill.opacity = style.fontOpacity;
+            myStroke.opacity = style.fontOpacity;
+        }
+
+        // Setting the font family does not seem to work
+        // TODO: make this work!
+        if (style.fontFamily) {
+            textpath.style.fontfamily = style.fontFamily;
+            //textpath.style['font-family'] = style.fontFamily;
+            label.style.fontFamily = style.fontFamily;
+        }
+
+        // We need to set the fontSize to prevent JS errors
+        textpath.style.fontSize = style.fontSize || 10;
+
+        if (style.fontWeight) {
+            textpath.style.fontWeight = style.fontWeight;
+        }
+
+        if (style.fontStyle) {
+            textpath.style.fontStyle = style.fontStyle;
+        }
+
+        var align = style.labelAlign || "cm";
+        if (align.length == 1) {
+            align += "m";
+        }
+
+        // Set the horizontal align
+        var hAlign;
+        switch (align.substr(0,1)) {
+            case 'l': hAlign = "left"; break;
+            case 'c': hAlign = "center"; break;
+            case 'r': hAlign = "right"; break;
+        }
+        textpath.style['v-text-align'] = hAlign;
+        if(style.labelSelect === true) {
+            label._featureId = featureId;
+            textpath._featureId = featureId;
+            textpath._geometry = location;
+            textpath._geometryClass = location.CLASS_NAME;
+            //label._geometry = location;
+            //label._geometryClass = location.CLASS_NAME;
+        }
+
+        // Somehow our label is 1 pixel off horizontally
+        // TODO: find out what causes it and then fix it
+        var xshift = 1; // hack
+        label.style.left = parseInt(label.style.left)+xshift+"px";
+
+        // Set the vertical align by using the fontSize as the height
+        // We default to 0.5 in case style.labelAlign comes from a
+        // variable like "${labelAlign}" as happens when an OL.Graticule
+        // ends up in a GeoExt LegenPanel
+        var yshift = parseInt(textpath.style.fontSize) *
+            (OpenLayers.Renderer.VML.LABEL_SHIFT[align.substr(1,1)] || 0.5);
+
+        // somehow our label is about 10 pixels off vertically
+        // TODO: find out what causes it and then fix it
+        yshift -= 7; 
+        label.style.top = parseInt(label.style.top)+yshift+"px";
+
+    },
+    
+    /**
+     * This method is only called by the renderer itself.
+     * 
+     * Parameters: 
+     * featureId - {String}
+     * style -
+     * location - {<OpenLayers.Geometry.Point>}
+     */
+    drawTextOLD: function(featureId, style, location) {
         var label = this.nodeFactory(featureId + this.LABEL_ID_SUFFIX, "olv:rect");
         var textbox = this.nodeFactory(featureId + this.LABEL_ID_SUFFIX + "_textbox", "olv:textbox");
         
@@ -1018,3 +1193,4 @@
     "m": .5,
     "b": 1
 };
+
Index: lib/OpenLayers/Renderer/SVG.js
===================================================================
--- lib/OpenLayers/Renderer/SVG.js	(revision 12369)
+++ lib/OpenLayers/Renderer/SVG.js	(working copy)
@@ -677,14 +677,27 @@
      * featureId - {String}
      * style -
      * location - {<OpenLayers.Geometry.Point>}
+     * drawHalo - {Boolean}
      */
-    drawText: function(featureId, style, location) {
+    drawText: function(featureId, style, location, drawHalo) {
+        // First draw text in halo color and size and overlay the 
+        // normal text afterwards
+        if (style.labelHaloColor) {
+            var haloStyle = OpenLayers.Util.extend({}, style);
+            haloStyle.fontColor = haloStyle.labelHaloColor;
+            haloStyle.fontStrokeColor = haloStyle.labelHaloColor;
+            haloStyle.fontStrokeWidth = style.labelHaloWidth || 2;
+            delete haloStyle.labelHaloColor;
+            this.drawText(featureId, haloStyle, location, true);
+        }
+         
         var resolution = this.getResolution();
 
         var x = (location.x / resolution + this.left);
         var y = (location.y / resolution - this.top);
 
-        var label = this.nodeFactory(featureId + this.LABEL_ID_SUFFIX, "text");
+        var haloSuffix = drawHalo ? this.HALO_ID_SUFFIX : "";
+        var label = this.nodeFactory(featureId + this.LABEL_ID_SUFFIX + haloSuffix, "text");
 
         label.setAttributeNS(null, "x", x);
         label.setAttributeNS(null, "y", -y);
@@ -692,6 +705,12 @@
         if (style.fontColor) {
             label.setAttributeNS(null, "fill", style.fontColor);
         }
+        if (style.fontStrokeColor) {
+            label.setAttributeNS(null, "stroke", style.fontStrokeColor);
+        }
+        if (style.fontStrokeWidth) {
+            label.setAttributeNS(null, "stroke-width", style.fontStrokeWidth);
+        }
         if (style.fontOpacity) {
             label.setAttributeNS(null, "opacity", style.fontOpacity);
         }
@@ -728,11 +747,16 @@
             label.removeChild(label.lastChild);
         }
         for (var i = 0; i < numRows; i++) {
-            var tspan = this.nodeFactory(featureId + this.LABEL_ID_SUFFIX + "_tspan_" + i, "tspan");
+            var tspan = this.nodeFactory(featureId + this.LABEL_ID_SUFFIX 
+                            + haloSuffix + "_tspan_" + i, "tspan");
             if (style.labelSelect === true) {
                 tspan._featureId = featureId;
                 tspan._geometry = location;
                 tspan._geometryClass = location.CLASS_NAME;
+                // Allow for setting cursor attribute
+                if (style.cursor != null) {
+                    label.setAttributeNS(null, "cursor", style.cursor);
+                }
             }
             if (OpenLayers.IS_GECKO === false) {
                 tspan.setAttributeNS(null, "baseline-shift",
Index: lib/OpenLayers/Renderer/SVG2.js
===================================================================
--- lib/OpenLayers/Renderer/SVG2.js	(revision 12369)
+++ lib/OpenLayers/Renderer/SVG2.js	(working copy)
@@ -578,19 +578,43 @@
      * Returns:
      * {DOMElement} container holding the text label
      */
-    drawText: function(featureId, style, location) {
+    drawText: function(featureId, style, location, drawHalo) {
+        // First draw text in halo color and size and overlay the 
+        // normal text afterwards
+        if (style.labelHaloColor) {
+            var haloStyle = OpenLayers.Util.extend({}, style);
+            haloStyle.fontColor = haloStyle.labelHaloColor;
+            haloStyle.fontStrokeColor = haloStyle.labelHaloColor;
+            haloStyle.fontStrokeWidth = style.labelHaloWidth || 2;
+            delete haloStyle.labelHaloColor;
+            this.drawText(featureId, haloStyle, location, true);
+        }
+         
         var g = OpenLayers.Renderer.NG.prototype.drawText.apply(this, arguments);
-        var text = g.firstChild ||
-            this.nodeFactory(featureId + this.LABEL_ID_SUFFIX + "_text", "text");
+        var haloSuffix = drawHalo ? this.HALO_ID_SUFFIX : "";
+        var haloSuffix = "";
 
+console.info('drawHalo', drawHalo);        
+console.info('g', g);        
+        var text = g.firstNode || this.nodeFactory(featureId + this.LABEL_ID_SUFFIX +
+                                         haloSuffix + "_text", "text");
+console.info('text', text);        
+
         var res = this.getResolution();
         text.setAttributeNS(null, "x", location.x / res);
         text.setAttributeNS(null, "y", - location.y / res);
+console.info('location', location.x/res, location.y/res);
         g.setAttributeNS(null, "transform", "scale(" + res + ")");
 
         if (style.fontColor) {
             text.setAttributeNS(null, "fill", style.fontColor);
         }
+        if (style.fontStrokeColor) {
+            text.setAttributeNS(null, "stroke", style.fontStrokeColor);
+        }
+        if (style.fontStrokeWidth) {
+            text.setAttributeNS(null, "stroke-width", style.fontStrokeWidth);
+        }
         if (style.fontOpacity) {
             text.setAttributeNS(null, "opacity", style.fontOpacity);
         }
@@ -628,7 +652,9 @@
         }
         for (var i = 0; i < numRows; i++) {
             var tspan = text.childNodes[i] ||
-                this.nodeFactory(featureId + this.LABEL_ID_SUFFIX + "_tspan_" + i, "tspan");
+                this.nodeFactory(featureId + this.LABEL_ID_SUFFIX 
+                                     + haloSuffix + "_tspan_" + i, "tspan");
+
             if (style.labelSelect === true) {
                 tspan._featureId = featureId;
             }
Index: examples/vector-features-with-text.html
===================================================================
--- examples/vector-features-with-text.html	(revision 12369)
+++ examples/vector-features-with-text.html	(working copy)
@@ -22,28 +22,43 @@
             renderer = (renderer) ? [renderer] : OpenLayers.Layer.Vector.prototype.renderers;
             
             var vectorLayer = new OpenLayers.Layer.Vector("Simple Geometry", {
-                styleMap: new OpenLayers.StyleMap({'default':{
-                    strokeColor: "#00FF00",
-                    strokeOpacity: 1,
-                    strokeWidth: 3,
-                    fillColor: "#FF5500",
-                    fillOpacity: 0.5,
-                    pointRadius: 6,
-                    pointerEvents: "visiblePainted",
-                    // label with \n linebreaks
-                    label : "name: ${name}\n\nage: ${age}",
-                    
-                    fontColor: "${favColor}",
-                    fontSize: "12px",
-                    fontFamily: "Courier New, monospace",
-                    fontWeight: "bold",
-                    labelAlign: "${align}",
-                    labelXOffset: "${xOffset}",
-                    labelYOffset: "${yOffset}"
-                }}),
+                styleMap: new OpenLayers.StyleMap(
+                    new OpenLayers.Style(
+                    {
+                        strokeColor: "#00FF00",
+                        strokeOpacity: 1,
+                        strokeWidth: 3,
+                        fillColor: "#FF5500",
+                        fillOpacity: 0.5,
+                        pointRadius: 6,
+                        pointerEvents: "visiblePainted",
+                        label : "name: ${name},\nage: ${age}",
+                        labelHaloColor: "${getHaloColor}",
+                        labelHaloWidth: "${getHaloWidth}",
+                        
+                        fontColor: "${favColor}",
+                        fontSize: "12px",
+                        fontFamily: "Courier New, monospace",
+                        fontWeight: "bold",
+                        labelAlign: "${align}",
+                        labelXOffset: "${xOffset}",
+                        labelYOffset: "${yOffset}"
+                   },
+                   {
+                       context: {
+                             getHaloColor: function(feature) {
+                                return feature.attributes["haloColor"] || "";
+                            },
+                             getHaloWidth: function(feature) {
+                                return feature.attributes["haloWidth"] || "";
+                            }
+                       }
+                   }
+                )),
                 renderers: renderer
             });
             
+            
             // create a point feature
             var point = new OpenLayers.Geometry.Point(-111.04, 45.68);
             var pointFeature = new OpenLayers.Feature.Vector(point);
@@ -87,6 +102,7 @@
                     name: "ball-and-chain",
                     age: 30,
                     favColor: 'black',
+                    haloColor: 'white',
                     align: 'rt'
                 });
 
@@ -97,6 +113,8 @@
                 name: "offset",
                 age: 22,
                 favColor: 'blue',
+                haloColor: '#FFA500',
+                haloWidth: 6,
                 align: "cm",
                 // positive value moves the label to the right
                 xOffset: 50,
Index: examples/wfs-protocol.html
===================================================================
--- examples/wfs-protocol.html	(revision 12369)
+++ examples/wfs-protocol.html	(working copy)
@@ -25,7 +25,8 @@
                     protocol: new OpenLayers.Protocol.WFS({
                         url:  "http://demo.opengeo.org/geoserver/wfs",
                         featureType: "tasmania_roads",
-                        featureNS: "http://www.openplans.org/topp"
+                        //featureNS: "http://www.openplans.org/topp"
+                        featurePrefix: "topp"
                     })
                 });
 
